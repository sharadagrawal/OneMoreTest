{
    "name": "SecurityBeltWarningsPipeline",
    "properties": {
        "description": "Copy data from a blob to Azure SQL table",
        "activities": [
            {
                "name": "RunHiveQuery",
                "description": "Runs a hive query",
                "type": "HDInsightActivity",
                "inputs": [ { "name": "HiveInputBlobTable" } ],
                "outputs": [ { "name": "HiveOutputBlobTable" } ],
                "linkedServiceName": "HDInsightOnDemandCluster",
                "transformation": {
                    "type": "Hive",
                    "extendedProperties": {
                        "INPUT": "wasb://myshuttledata@myshuttlestorage2.blob.core.windows.net/OBD-SecurityBelt",
                        "RESULTOUTPUT": "wasb://myshuttledata@myshuttlestorage2.blob.core.windows.net/OBD-SecurityBelt-Output",
                        "Year": "$$Text.Format('{0:yyyy}',SliceStart)",
                        "Month": "$$Text.Format('{0:%M}',SliceStart)",
                        "Day": "$$Text.Format('{0:%d}',SliceStart)"
                    },
                    "scriptpath": "myshuttledata\\scripts\\SecurityBeltWarnings.hql",
                    "scriptLinkedService": "AzureStorage"
                },
                "policy": {
                    "concurrency": 1,
                    "executionPriorityOrder": "NewestFirst",
                    "retry": 1,
                    "timeout": "01:00:00"
                }
            },
            {
                "name": "CopyFromBlobToSQL",
                "description": "Push Security Belt Warnings data to Sql Azure",
                "type": "CopyActivity",
                "inputs": [ { "name": "HiveOutputBlobTable" } ],
                "outputs": [ { "name": "AzureSQLTableOutput" } ],
                "transformation": {
                    "source": {
                        "type": "BlobSource"
                    },
                    "sink": {
                        "type": "SqlSink"
                    }
                },
                "Policy": {
                    "concurrency": 1,
                    "executionPriorityOrder": "OldestFirst",
                    "style": "StartOfInterval",
                    "retry": 2,
                    "timeout": "00:30:00"
                }
            }
        ]
    }
} 